(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{369:function(e,r,t){"use strict";t.r(r);var o=t(3),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Index of c++ code in github or this blog, easy for search and read.")]),e._v(" "),t("h2",{attrs:{id:"important"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#important"}},[e._v("#")]),e._v(" Important")]),e._v(" "),t("ul",[t("li",[e._v("Variadic function (可变长参数函数): "),t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/variadic_function.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("average the number"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"dp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dp"}},[e._v("#")]),e._v(" DP")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maximum Subarray"),t("OutboundLink")],1),e._v(": 子序列和的最大值，初步的动态规划")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unique Path"),t("OutboundLink")],1),e._v(": 机器人走矩形，简单的动态规划")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Minimum Path Sum"),t("OutboundLink")],1),e._v(": 类似于上题目")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Climbing Stairs"),t("OutboundLink")],1),e._v(": 一次爬 1 或者 2 步，所有的可能爬上去的方式")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/house-robber/",target:"_blank",rel:"noopener noreferrer"}},[e._v("House Robber"),t("OutboundLink")],1),e._v(": 动态规划问题，3个版本")])])]),e._v(" "),t("h2",{attrs:{id:"bfs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bfs"}},[e._v("#")]),e._v(" BFS")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode.com/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jump array"),t("OutboundLink")],1),e._v(": 最少的步数调到数组结尾")])]),e._v(" "),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[e._v("#")]),e._v(" String")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/string-getline.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("getline()"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/string-toupper.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("to-upper"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/string-decimalism.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("decimalism"),t("OutboundLink")],1),e._v(" : 十六进制和十进制的转化")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Longest Palindromic Substring"),t("OutboundLink")],1),e._v(": 最长回文子序列，如何求字符串的"),t("RouterLink",{attrs:{to:"/algorithm/leetcode/leetcode_problem.html#get-all-substring"}},[e._v("所有 substring")]),e._v("? 如何动态规划求最长回文子串？")],1)]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/palindromic-substrings/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Palindromic Substrings"),t("OutboundLink")],1),e._v(": 求一个字符串的所有回文子串")])])]),e._v(" "),t("h2",{attrs:{id:"map-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-set"}},[e._v("#")]),e._v(" Map & Set")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/map_word_count.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("word count"),t("OutboundLink")],1),e._v(": 统计一行中相同单词的出现次数，map 的经典应用")])]),e._v(" "),t("h2",{attrs:{id:"tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tree"}},[e._v("#")]),e._v(" Tree")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Binary Tree Inorder Traversal"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Binary Tree Level Order Traversal"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/symmetric-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Symmetric Tree"),t("OutboundLink")],1),e._v(": 判断二叉树是否对称")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Invert Binary Tree"),t("OutboundLink")],1),e._v(": 镜像（对称）翻转二叉树")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maximum Depth of Binary Tree"),t("OutboundLink")],1),e._v(": 二叉树的高度")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/path-sum-iii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Path Sum III"),t("OutboundLink")],1),e._v(": 找出树中的路径，使其和为某个固定的数")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/diameter-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Diameter of Binary Tree"),t("OutboundLink")],1),e._v(": 二叉树的直径")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/merge-two-binary-trees/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Merge Two Binary Trees"),t("OutboundLink")],1),e._v(": 合并两个二叉树")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Construct Binary Tree from Preorder and Inorder Traversal"),t("OutboundLink")],1),e._v(": 根据先序和中序遍历结果确定二叉树")])])]),e._v(" "),t("h2",{attrs:{id:"linked-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[e._v("#")]),e._v(" Linked List")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intersection of Two Linked Lists"),t("OutboundLink")],1),e._v(": 求链表的重复交叉")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reverse Linked List"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/data_struct/linked_list_reverse.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Code"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Merge Two Sorted Lists"),t("OutboundLink")],1),e._v(": 按序合并两个链表，使用递归")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Palindrome Linked List"),t("OutboundLink")],1),e._v(": 判断链表是否回文")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1214/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linked List Cycle II"),t("OutboundLink")],1),e._v(": 求链表环的交点位置")])])]),e._v(" "),t("h2",{attrs:{id:"recursion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recursion"}},[e._v("#")]),e._v(" Recursion")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Merge Two Sorted Lists"),t("OutboundLink")],1),e._v(": 按序合并两个链表，使用递归")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reverse Linked List"),t("OutboundLink")],1),e._v("： reverse a list")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/path-sum-iii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Path Sum III"),t("OutboundLink")],1),e._v(": 找出树中的路径，使其和为某个固定的数")])])]),e._v(" "),t("h2",{attrs:{id:"c-basic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-basic"}},[e._v("#")]),e._v(" C basic")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/sizeof.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("sizeof"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/pointer_array_1.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("pointer-1"),t("OutboundLink")],1),e._v(": 从函数返回多个数据项")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/pointer_array_2.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("pointer-2"),t("OutboundLink")],1),e._v("：数组和指针之间的转化")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/master/cpp/pointer_array_3.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("pointer-3"),t("OutboundLink")],1),e._v("：对数据的拷贝，别名和复制")])])]),e._v(" "),t("h2",{attrs:{id:"math"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[e._v("#")]),e._v(" Math")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/reverse-integer/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reverse Integer"),t("OutboundLink")],1),e._v(": reverse digits of an integer. Reference in "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/cpp/c-language/cpp-integer-limits?view=vs-2017",target:"_blank",rel:"noopener noreferrer"}},[e._v("C++ Integer Limits"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/majority-element/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Majority Element"),t("OutboundLink")],1),e._v(": 找数组中的出现次数多余 n // 2 的数")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Move Zeroes"),t("OutboundLink")],1),e._v(": 将数组中的 0 元素全部移位到数组后端")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Find All Numbers Disappeared in an Array"),t("OutboundLink")],1),e._v(": 找出数组中的未出现的元素")])])]),e._v(" "),t("h2",{attrs:{id:"stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[e._v("#")]),e._v(" Stack")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Valid Parentheses - 括号匹配问题"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://leetcode.com/problems/min-stack/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Min Stack"),t("OutboundLink")],1),e._v(": 设计一个最小栈")])])]),e._v(" "),t("h2",{attrs:{id:"stl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stl"}},[e._v("#")]),e._v(" STL")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/chenweigao/_code/blob/f7670c996a/cpp/narcissistic_number.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("count_if"),t("OutboundLink")],1),e._v(" narcissistic number (水仙花数), find the common between two vectors")])])])}),[],!1,null,null,null);r.default=n.exports}}]);