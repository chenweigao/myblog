(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{639:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[t._v("#")]),t._v(" Socket")]),t._v(" "),a("h3",{attrs:{id:"data-struct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-struct"}},[t._v("#")]),t._v(" Data Struct")]),t._v(" "),a("p",[t._v("地址转化函数： "),a("code",[t._v('inet_pton(AF_INET, "127.0.0.1", &serv.sin_addr.s_addr);')]),t._v("  和  "),a("code",[t._v("inet_ntop")]),t._v(" 。 其中 p 表示"),a("strong",[t._v("表达 (presentation)")]),t._v(", n 表示 "),a("strong",[t._v("数值 (numeric)")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INET_ADDRSTRLEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_ntop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("套接字结构体为：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    uint_8  sin_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sa_family_t")]),t._v(" sin_family"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_port_t")]),t._v("   sin_port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16-bit")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_addr")]),t._v(" sin_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" sin_zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_addr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("in_addr_t")]),t._v("   s_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 32-bit IPV4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"值-结果参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值-结果参数"}},[t._v("#")]),t._v(" 值 - 结果参数")]),t._v(" "),a("p",[t._v("问题：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addrlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("为什么 addrlen 要以指针的方式传递？")]),t._v(" "),a("ul",[a("li",[t._v("因为 addrlen 是"),a("strong",[t._v("值 - 结果参数")]),t._v("：套接字地址结构从"),a("strong",[t._v("内核到进程")]),t._v("方向的传递。")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("从进程到内核传递套接字地址结构的函数有 3 个：bind, connect 和 sendto; 这些函数的一个参数是指向某个套接字地址结构的指针，另一个参数是该结构的整数大小。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" serv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fill in serv")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("serv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("从内核到进程传递套接字地址结构的函数有 4 个：accept, recvfrom, getsockname 和 getpeername; 这些函数的其中两个参数是指向某个套接字地址结构的指针和指向表示该结构大小的整数变量的指针。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_un")]),t._v(" cli"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nlen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpeername")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unixfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cli"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"/value-result.jpg",alt:"value-result"}})]),t._v(" "),a("p",[t._v("如图中所示，当函数被调用时，结构大小是一个 "),a("strong",[t._v("值 (value)")]),t._v(" , 它告诉内核该结构的大小，这样内核在写该结构时不至于越界；当函数返回时，结构大小又是一个 "),a("strong",[t._v("结果 (result)")]),t._v(" , 它告诉内核在该结构中究竟存储了多少信息。这种类型的参数称为 "),a("strong",[t._v("value-result")]),t._v(" 参数。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("所有的套接字函数都是内核中的系统调用。")])]),t._v(" "),a("p",[t._v("除了系统调用之外，操作系统还可以通过异常 (如缺页异常) 和中断 (如 0x80) 从用户态切换到内核态。")]),t._v(" "),a("h3",{attrs:{id:"listen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listen"}},[t._v("#")]),t._v(" listen()")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" backlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("当 socket 函数创建了一个套接字时，它被假设为一个 "),a("strong",[t._v("主动套接字")]),t._v("，也就是说，它是一个将调用 connect () 发起连接的客户端套接字。listen () 函数把一个未连接的套接字转化为 "),a("strong",[t._v("被动套接字")]),t._v("。指示内核应该接受指向该套接字的连接请求。")]),t._v(" "),a("blockquote",[a("p",[t._v("本函数通常在调用 socket 和 bind 这两个函数之后，并在调用 accept 函数之前调用。")])]),t._v(" "),a("p",[t._v("第二个参数规定了内核应该为相应套接字排队的最大连接个数，比如 36。对于这个参数 "),a("em",[t._v("backlog")]),t._v(", 内核为任何一个给定的套接字维护"),a("RouterLink",{attrs:{to:"/Networks/networks.html#连接队列"}},[t._v("两个队列")]),t._v("：")],1),t._v(" "),a("ol",[a("li",[a("p",[t._v("未完成连接队列 (incomplete connection queue): SYN 分节已由某个客户端发出并到达服务器，而服务器正在等待完成相应的 TCP 三路握手过程；这些套接字处于 SYN_RCVD 状态；\n在三路握手正常完成的前提下，未完成连接队列中的任何一项在其中的存留时间就是一个 RTT, RTT 的取值取决于特定的客户与服务器。")])]),t._v(" "),a("li",[a("p",[t._v("已完成连接的队列 (completed connection queue): 每个已完成 TCP 三路握手的客户端对应 1 其中的一项；这些套接字处于 ESTABLISHED 状态。")])])]),t._v(" "),a("p",[t._v("两队列之和不超过 backlog.")]),t._v(" "),a("p",[t._v("当进程调用 accept 函数之后，已完成连接队列中的对头项将返回给进程，或者如果该队列为空，那么进程将被投入休眠，直到 TCP 在该队列放入一项才唤醒它。")]),t._v(" "),a("h3",{attrs:{id:"accept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accept"}},[t._v("#")]),t._v(" accept()")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cliaddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addrlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 accept () 函数中，我们称它的第一个参数为 "),a("strong",[t._v("监听套接字 (listening socket)")]),t._v(" 描述符，称它的第二个参数为 "),a("strong",[t._v("已连接套接字 (connected socket)")]),t._v(" 描述符。")]),t._v(" "),a("p",[t._v("监听套接字由 socket 创建，随后用于 bind 和 listen 的第一个参数。一个服务器通常仅仅创建一个监听套接字，它在该服务器的生命周期内一直存在。")]),t._v(" "),a("p",[t._v("已连接套接字由内核为每个服务器进程接受的客户端创建，当服务器完成对某个客户的服务时，相应的已连接套接字就被关闭。")]),t._v(" "),a("h2",{attrs:{id:"select-poll-and-epoll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-poll-and-epoll"}},[t._v("#")]),t._v(" select, poll and epoll")]),t._v(" "),a("h3",{attrs:{id:"select-的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-的缺点"}},[t._v("#")]),t._v(" select 的缺点")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("单个进程能够监视的文件描述符的数量存在最大限制 (_FD_SETSIZE)，通常是 1024。由于 select 采用轮询的方式扫描文件描述符，文件描述符越多，性能越差")])]),t._v(" "),a("li",[a("p",[t._v("内核 / 用户空间拷贝问题，select 需要复制大量的数组，产生了巨大的开销")])]),t._v(" "),a("li",[a("p",[t._v("select 返回的是含有整个句柄的数组，需要遍历整个数组才能发现哪些句柄发生了事件")])]),t._v(" "),a("li",[a("p",[t._v("select 的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行 IO，那么之后再次 select 调用还是会将这些文件描述符通知进程。")])])]),t._v(" "),a("p",[t._v("相比于 select 模型，poll 使用链表保存文件描述符，因此没有了监视文件数量 (缺点 1) 的限制，但其他三个缺点依然存在。")]),t._v(" "),a("p",[t._v("假设有 100 万个客户端同时与一个服务器保持着 TCP 连接，在 select/poll 时代，服务器进程每次都把 100 万个连接告诉操作系统（从用户态复制句柄数据结构到内核态），让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll 一般只能处理几千的并发连接。")]),t._v(" "),a("h2",{attrs:{id:"epoll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[t._v("#")]),t._v(" epoll")]),t._v(" "),a("p",[t._v("epoll 主要有三个方法：")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("epoll_create(int __size)")]),t._v(" : 返回一个 epfd 文件描述符，红黑树的根节点")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("int epoll_ctl (int __epfd, int __op, int __fd, struct epoll_event *__event)")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("int epoll_wait (int __epfd, struct epoll_event *__events, int __maxevents, int __timeout);")])])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Epoll events */")]),t._v("\n  epoll_data_t data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* User data variable */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("events 包括：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("EPOLLIN")])]),t._v(" "),a("li",[a("p",[t._v("EPOLLOUT")])]),t._v(" "),a("li",[a("p",[t._v("EPOLLERR")])])]),t._v(" "),a("p",[t._v("判断是否已连接的客户端： "),a("code",[t._v("!all[i] & EPOLLIN")])]),t._v(" "),a("p",[t._v("判断是否新连接：  "),a("code",[t._v("fd == lfd")]),t._v(" , 有新连接时，调用 accept () 接受该连接请求。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" epoll_data\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" u32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" u64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" epoll_data_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("*ptr")]),t._v("  的用法：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockinfo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("sockInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsockInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" sinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockInfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsinfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("fd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsinfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" serv_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// *ptr")]),t._v("\ncv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sinfo\n")])])]),a("p",[t._v("令 ptr 指向这个结构体，传入  "),a("code",[t._v("epoll_ctl()")]),t._v("  即可。")]),t._v(" "),a("p",[t._v("更复杂的带回调的  "),a("code",[t._v("epoll_data_t")]),t._v("  例子：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myevent_s")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要监听的文件描述符")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应的监听事件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向 myevent_s 的函数指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("call_back"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1：在红黑树上监听；0：不监听")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BUFLEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" last_active"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// time(NULL) 记录每次加入红黑树 g_efd 的时间值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("epoll_ctl 的 op 操作：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("EPOLL_CTL_ADD")])]),t._v(" "),a("li",[a("p",[t._v("EPOLL_CTL_MOD")])]),t._v(" "),a("li",[a("p",[t._v("EPOLL_CTL_DEL")])])]),t._v(" "),a("h2",{attrs:{id:"epoll-三种工作模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#epoll-三种工作模式"}},[t._v("#")]),t._v(" epoll 三种工作模式")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("水平触发模式（默认模式）- LT")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("只要 fd 对应的缓冲区有数据， "),a("code",[t._v("epoll_wait")]),t._v("  就返回，例如读缓冲区的 buf 设置过小，就会使得读操作次数变多， "),a("code",[t._v("epoll_wait")]),t._v("  调用变多，直到读完缓冲区中的数据；")])]),t._v(" "),a("li",[a("p",[t._v("返回的次数和发送数据的次数没有关系；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("epoll_wait")]),t._v("  调用次数越多，系统开销越大；")])]),t._v(" "),a("li",[a("p",[t._v("在 EPOLL_OUT 中， "),a("code",[t._v("epoll_wait")]),t._v("  会一直返回，缓冲区能写数据，该函数会返回，缓冲区满的时候，不返回。"),a("strong",[t._v("本质上是检测写缓冲区是否可以写。")])])])])]),t._v(" "),a("li",[a("p",[t._v("边沿触发模式 - ET")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("ev.events = EPOLLIN | EPOLLET")])])]),t._v(" "),a("li",[a("p",[t._v("fd - 默认阻塞属性")])]),t._v(" "),a("li",[a("p",[t._v("客户端给 server 发数据：发一次数据 server 的  "),a("code",[t._v("epoll_wait")]),t._v("  返回一次；")])]),t._v(" "),a("li",[a("p",[t._v("缓冲区中要是有没发完的数据，除非新数据到达，剩余的数据才会被发送出来，"),a("strong",[t._v("不在乎数据是否读完")]),t._v("；")])]),t._v(" "),a("li",[a("p",[t._v("可以减少系统开销，提高  "),a("code",[t._v("epoll_wait")]),t._v("  的效率；")])]),t._v(" "),a("li",[a("p",[t._v("如果数据读不完，如何全部读出来？")]),t._v(" "),a("p",[a("code",[t._v("while(recv())")]),t._v("  数据读完之后  "),a("code",[t._v("recv")]),t._v("  会阻塞，需要"),a("strong",[t._v("设置 fd 非阻塞")]),t._v("，也就是边沿非阻塞触发模式。")])]),t._v(" "),a("li",[a("p",[t._v("EPOLL_OUT 中，第一次设置的时候  "),a("code",[t._v("epoll_wait")]),t._v("  会返回一次，然后就不返回了，除非满缓冲区被读，从 满 -> 不满的时候再返回一次，然后不再返回。")])])])]),t._v(" "),a("li",[a("p",[t._v("边沿非阻塞触发模式 - "),a("a",{attrs:{href:"https://github.com/chenweigao/socket-epoll/blob/master/cpp_webserver/nonblock_et_epoll.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码实现"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v("效率最高")])]),t._v(" "),a("li",[a("p",[t._v("如何设置非阻塞？")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("open()")]),t._v(" : 修改 flags:  "),a("code",[t._v("O_WDRW | O_NONBLUCK")]),t._v(" , 使得文件描述符设置为非阻塞。适用于终端文件 dev/tty")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("fcntl()")]),t._v(" :")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<fcntl.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcntl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" F_GETFL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" ONNBLOCK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fcntl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" F_SETFL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("将缓冲区的数据全读出，特别是针对缓冲区大小不够的情况")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("recv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDOUT_FILENO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"突破文件描述符上限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#突破文件描述符上限"}},[t._v("#")]),t._v(" 突破文件描述符上限")]),t._v(" "),a("p",[t._v("查看受计算机限制的文件描述符上限：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /proc/sys/fs/file-max\n")])])]),a("p",[t._v("通过配置修改上限值：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# see open files's num: 1024")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("ulimit")]),t._v(" -a\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/security/limits.conf\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add lines")]),t._v("\n*   soft    nofile  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v("\n*   hard    nofile  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# temp setting")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("ulimit")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n")])])]),a("h2",{attrs:{id:"libevent-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libevent-install"}},[t._v("#")]),t._v(" Libevent Install")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("简介")]),a("p",[t._v("libevent 封装了 socket 通信、IO 多路转接；精简，专注于网络，性能高；跨平台；"),a("strong",[t._v("事件驱动")]),t._v("。")])]),a("h3",{attrs:{id:"linux-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-install"}},[t._v("#")]),t._v(" Linux Install")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检测安装环境，生成 makefile")]),t._v("\n./configure\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),a("p",[a("code",[t._v("make install")]),t._v("  会将数据拷贝到对应的目录，如果目录不存在，则创建该目录。")]),t._v(" "),a("p",[t._v("默认目录是：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("/usr/local/include")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("/usr/local/bin")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("/usr/local/lib")])])])]),t._v(" "),a("p",[t._v("验证是否安装成功：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" sample/\ngcc hello-world.c -o hello-world -l event\n\n./hello-world\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" localhost "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9995")]),t._v("\n")])])]),a("h3",{attrs:{id:"window-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-install"}},[t._v("#")]),t._v(" Window Install")]),t._v(" "),a("p",[t._v("使用 VS 的开发者命令行，然后输入：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("nmake /f Makefile.nmake\n")])])]),a("p",[t._v("编译完成后会看到三个 lib 文件，在 VS 的设置中，添加附加依赖项和附加包含项即可，分别包含这三个 lib 文件和 include 文件。")]),t._v(" "),a("p",[t._v("在运行时，会产生一些错误：")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("#define _CRT_SECURE_NO_WARNINGS")]),t._v("  添加这行，对应 window 下的  "),a("code",[t._v("strerror")]),t._v("  错误；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v('#pragma comment(lib, "ws2_32.lib")')]),t._v("  对应 winsock 相关的问题。")])])]),t._v(" "),a("h2",{attrs:{id:"libevent-框架概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libevent-框架概述"}},[t._v("#")]),t._v(" Libevent 框架概述")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("事件的底层处理框架")]),t._v(" "),a("ol",[a("li",[t._v("一个函数")])])]),t._v(" "),a("li",[a("p",[t._v("消息循环")]),t._v(" "),a("ol",[a("li",[t._v("一个函数")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("创建事件")])]),t._v(" "),a("ol",[a("li",[t._v("不带缓冲区 - event\n"),a("ol",[a("li",[t._v("几个函数")])])]),t._v(" "),a("li",[t._v("带缓冲区 - bufferevent\n"),a("ol",[a("li",[t._v("几个函数")])])])])]),t._v(" "),a("li",[a("p",[t._v("资源的释放")]),t._v(" "),a("ol",[a("li",[t._v("几个函数")])])])]),t._v(" "),a("p",[t._v("总结其使用方法是："),a("a",{attrs:{href:"https://github.com/chenweigao/socket-epoll/blob/master/cpp_webserver/bufferevent_server.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考程序 bufferevent_server.c"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建一个事件处理框架： "),a("code",[t._v("struct event_base* base = event_base_new();")]),t._v("  （流水线或设备初始化完成）")])]),t._v(" "),a("li",[a("p",[t._v("创建一个事件，并将事件添加到框架上：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("（服务端）使用 "),a("strong",[t._v("链接监听器")]),t._v(" 直接创建:  "),a("code",[t._v("struct evconnlistener* listen = evconnlistener_new_bind();")]),t._v(" , 函数中要求实现  "),a("code",[t._v("listen_cb")]),t._v("  函数回调；")])]),t._v(" "),a("li",[a("p",[t._v("使用  "),a("code",[t._v("struct event* ev = event_new()")]),t._v("  and  "),a("code",[t._v("event_add()")]),t._v(" , "),a("a",{attrs:{href:"https://github.com/chenweigao/socket-epoll/blob/master/cpp_webserver/libevent_read_fifo.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考这里的 40 - 44 行"),a("OutboundLink")],1)])])]),t._v(" "),a("p",[t._v("如果要使用终端标准输入，可以使用 stdin 的文件描述符创建一个事件： "),a("code",[t._v("struct events* ev_in = event_new(base, STDIN_FILENO, EV_READ | EV_PERSIST, read_terminal, NULL);")])])]),t._v(" "),a("li",[a("p",[t._v("开始事件循环:  "),a("code",[t._v("event_base_dispatch(base);")])])]),t._v(" "),a("li",[a("p",[t._v("释放资源:  "),a("code",[t._v("evconnlistener_free(listen);")]),t._v(" ,  "),a("code",[t._v("event_base_free(base);")]),t._v("  and  "),a("code",[t._v("event_free();")])])])]),t._v(" "),a("h2",{attrs:{id:"bufferevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bufferevent"}},[t._v("#")]),t._v(" bufferevent")]),t._v(" "),a("p",[a("code",[t._v("bufferevent")]),t._v("  相比于  "),a("code",[t._v("event")]),t._v("  是创建带缓冲区的事件，包括读缓冲区和写缓冲区，参考"),a("a",{attrs:{href:"https://github.com/libevent/libevent/blob/master/sample/hello-world.c",target:"_blank",rel:"noopener noreferrer"}},[t._v(" libevent 官网示例"),a("OutboundLink")],1),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("读：只要缓冲区有数据，就会被通知；")])]),t._v(" "),a("li",[a("p",[t._v("写：一般用不掉，自动发送并且返回回调。")])])]),t._v(" "),a("p",[a("code",[t._v("listen_cb")]),t._v("  回调中：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建一个带缓冲区的事件： "),a("code",[t._v("struct bufferevent* bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);")])])]),t._v(" "),a("li",[a("p",[t._v("然后  "),a("code",[t._v("bufferevent_setcb(bev, read_cb, write_cb, event_cb, NULL);")])])]),t._v(" "),a("li",[a("p",[t._v("然后分别实现三个回调:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("以  "),a("code",[t._v("read_cb()")]),t._v("  为例，读写回调函数原型为： "),a("code",[t._v("typedef void (*bufferevent_data_cb)(struct bufferevent *bev, void *ctx);")])])]),t._v(" "),a("li",[a("p",[t._v("事件回调函数原型为： "),a("code",[t._v("typedef void (*bufferevent_event_cb)(struct bufferevent *bev, short what, void *ctx);")]),t._v(" "),a("code",[t._v("what")]),t._v("  包括的有:  "),a("code",[t._v("BEV_EVENT_*")]),t._v(" ;")])])])]),t._v(" "),a("li",[a("p",[t._v("释放资源：使用  "),a("code",[t._v("bufferent_free()")]),t._v(" .")])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"},[t._v("bug avoid")]),a("p",[t._v("在初始化  "),a("code",[t._v("listen_cb")]),t._v("  的回调函数中，会使用读缓冲区和写缓冲区，bufferevent 默认读缓冲区是不可用的；")]),t._v(" "),a("p",[t._v("一般情况下，我们将这两个缓冲区都  "),a("code",[t._v("bufferevent_enable()")]),t._v(" , 防止出现段异常")])]),a("p",[t._v("在套接字通信中，客户端连接服务器使用： "),a("code",[t._v("int bufferevent_socket_connect(struct bufferevent *, const struct sockaddr *, int);")])])])}),[],!1,null,null,null);s.default=n.exports}}]);