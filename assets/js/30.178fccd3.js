(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{616:function(s,a,t){"use strict";t.r(a);var e=t(6),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"docker-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-usage"}},[s._v("#")]),s._v(" Docker Usage")]),s._v(" "),t("h3",{attrs:{id:"postgresql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#postgresql"}},[s._v("#")]),s._v(" postgresql")]),s._v(" "),t("p",[s._v("postgresql:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5432")]),s._v(":5432 --name postgresql -v pgdata:/var/lib/postgresql/data -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("POSTGRES_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("pg123456 postgres\n")])])]),t("p",[s._v("dpage/pgadmin4:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5433")]),s._v(":80 --name pgadmin4 -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PGADMIN_DEFAULT_EMAIL")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mail@weigao.cc -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PGADMIN_DEFAULT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" dpage/pgadmin4\n")])])]),t("p",[s._v("登录 pgadamin 的时候，账号为邮箱，密码 123456 如上所设置。")]),s._v(" "),t("p",[s._v("在创建 pg server 的时候，密码为 pg123456 如上配置，服务器的地址用如下方式获取：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it postgresql "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n\nroot@b4afa86fb3b3:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/hosts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3      b4afa86fb3b3 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的 IP")]),s._v("\n")])])]),t("p",[s._v("此时我们使用  "),t("code",[s._v("172.17.0.3:5432")]),s._v("  连接数据库即可。")]),s._v(" "),t("h3",{attrs:{id:"mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[s._v("#")]),s._v(" MySql")]),s._v(" "),t("p",[s._v("参考文献: "),t("a",{attrs:{href:"http://docs.nigeerhuo.com/docker/",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker 绿皮书"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("使用 Docker 一步搞定 MySql 的安装：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v(":3306 --name mysql-dokcer -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -d mysql:latest\n")])])]),t("p",[s._v("上述命令的字段含义是：")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("-p 3306:3306")]),s._v(" ：将运行容器内部的 3306 端口桥接到宿主机的 3306 端口。左边的属于宿主机，右边的属于容器。")]),s._v(" "),t("li",[t("code",[s._v("-e MYSQL_ROOT_PASSWORD=123456")]),s._v(" ：设置容器使用的环境变量。 "),t("code",[s._v("MYSQL_ROOT_PASSWORD=123456")]),s._v("  指定了 mysql server 的密码是 123456. (默认用户名是 root)。")]),s._v(" "),t("li",[t("code",[s._v("-d")]),s._v(" ：后台运行容器。")])]),s._v(" "),t("h3",{attrs:{id:"mongodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mongodb"}},[s._v("#")]),s._v(" MongoDB")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run --name mongo-docker -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27077")]),s._v(":27017 mongo:latest\n")])])]),t("p",[s._v("此时可以用连接工具 "),t("a",{attrs:{href:"https://studio3t.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://studio3t.com/"),t("OutboundLink")],1),s._v(" 测试并连接到 27077 端口。")]),s._v(" "),t("h3",{attrs:{id:"jenkins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins"}},[s._v("#")]),s._v(" Jenkins")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18088")]),s._v(":8080 --name jenkins-docker -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50000")]),s._v(":50000 jenkins/jenkins:lts\n")])])]),t("p",[s._v("需要注意的是，Jenkins 会使用两个端口映射到宿主机上面，向外暴露的是 8080 服务，我们在本地只需要连接 18088 端口即可。")]),s._v(" "),t("p",[s._v("连接到 localhost:18088 后，会提示配置密码，需要进入容器查看密码。")]),s._v(" "),t("p",[s._v("容器启动以后，需要进入容器对 Jenkins 进行简单的配置：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("进入容器")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it jenkins-docker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("查看密码文件内容")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -f /var/jenkins_home/secrets/initialAdminPassword\n")])])]),t("p",[s._v("此时会得到类似于  "),t("code",[s._v("13e19c5410b145e59dbf70916ed4a3fb")]),s._v("  这样的输出，输入到浏览器端，即可进入。此时会自动安装一些插件，等待插件安装完成，然后设置账号密码，配置完成。")])])]),s._v(" "),t("h3",{attrs:{id:"tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[s._v("#")]),s._v(" Tomcat")]),s._v(" "),t("p",[s._v("指定 Tomcat 版本进行安装：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run --name tomcat-docker-8.0 -d  -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),s._v(":8080 tomcat:8.0\n")])])]),t("p",[s._v("安装完成之后，想要把本地的文件拷贝到容器中：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" ./.  tomcat-docker-8.0:/home\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者拷贝 war")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" foo.war tomcat-docker-8.0:/foo.war\n")])])]),t("h2",{attrs:{id:"spring-boot-with-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-with-docker"}},[s._v("#")]),s._v(" Spring-boot with Docker")]),s._v(" "),t("p",[s._v("使用 Dokcer + Spring-boot 构建项目。")]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"title"},[s._v("Docker in wsl")]),t("p",[s._v("这次尝试在 WSL 上面安装了 Docker，要注意到 WSL 是用了  "),t("code",[s._v("SysV init")]),s._v("  的命令而不是  "),t("code",[s._v("systemd")]),s._v(" , 所以在启动 Docker 的时候使用")]),s._v(" "),t("p",[t("code",[s._v("service docker start")]),s._v(" ，不必使用 systemctl.")])]),t("h2",{attrs:{id:"tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[s._v("#")]),s._v(" Tools")]),s._v(" "),t("h3",{attrs:{id:"portainer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#portainer"}},[s._v("#")]),s._v(" portainer")]),s._v(" "),t("p",[s._v("portainer 是一个 web 的 docker 管理工具。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/docker/wsl.png",alt:"wsl"}})]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker volume create portainer_data\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9000")]),s._v(":9000 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(":8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n")])])]),t("p",[s._v("然后访问 http://localhost:9000, 就可以进入 portainer 的设置界面。")]),s._v(" "),t("h2",{attrs:{id:"config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[s._v("#")]),s._v(" Config")]),s._v(" "),t("h3",{attrs:{id:"wsl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wsl"}},[s._v("#")]),s._v(" WSL")]),s._v(" "),t("p",[s._v("在 WSL 上开启 docker 守护进程：")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://docs.docker.com/desktop/windows/wsl/",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文档"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("将 WSL 转化为 WSL2：")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("wsl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exe "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("v\n\nwsl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exe "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set-version")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("distro name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 2\n\nwsl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exe "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set-default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("version 2\n\nwsl "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set-default")]),s._v(" <distro name> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n")])])]),t("p",[s._v("下面这一步可以省略，如果不是 WSL 需要手动开启：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DOCKER_HOST")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("tcp://127.0.0.1:2375\n")])])]),t("h3",{attrs:{id:"切换镜像仓到国内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切换镜像仓到国内"}},[s._v("#")]),s._v(" 切换镜像仓到国内")]),s._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://registry.docker-cn.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://dockerhub.azk8s.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://reg-mirror.qiniu.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://hub-mirror.c.163.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.mirrors.ustc.edu.cn"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("h2",{attrs:{id:"installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[s._v("#")]),s._v(" Installation")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Follow the "),t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/#os-requirements",target:"_blank",rel:"noopener noreferrer"}},[s._v("tutorial"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("Test whether the Docker is installed correctly (Ubuntu 16.04)")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker container run hello-world\n\ndocker --version\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker info\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-all"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("List the versions available in your repo:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-cache")]),s._v(" madison docker-ce\n")])])])])]),s._v(" "),t("h2",{attrs:{id:"containers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#containers"}},[s._v("#")]),s._v(" Containers")]),s._v(" "),t("p",[s._v("Make sure all is set up:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run hello-world\n")])])]),t("p",[s._v("Run the app, before this, a  "),t("code",[s._v("Dockerfile")]),s._v("  should be created:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v(":80 friendlyhello\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v(":80 friendlyhello\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# run on background")]),s._v("\n")])])]),t("p",[s._v("将 Docker 的 80 端口映射出去至 4000 端口，如果是在后台运行的话，可查看：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#stop")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker container stop 1fa4a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),t("h2",{attrs:{id:"share-images"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#share-images"}},[s._v("#")]),s._v(" Share images")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Login")])]),s._v(" "),t("li",[t("p",[s._v("Tag the image")])]),s._v(" "),t("li",[t("p",[s._v("Push the image")])]),s._v(" "),t("li",[t("p",[s._v("Pull")])])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker login\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker tag friendlyhello weigaochen/get-started:part2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker tag image username/respository:tag")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker push weigaochen/get-started:part2\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker run -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v(":801 weigaochen/get-started:part2\n")])])]),t("h2",{attrs:{id:"services"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#services"}},[s._v("#")]),s._v(" Services")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("通过  "),t("code",[s._v("docker-compose.yml")]),s._v("  来配置，在其中引用已经 Published 的 image")]),s._v(" "),t("blockquote",[t("p",[s._v("A  "),t("code",[s._v("docker-compose.yml")]),s._v("  file is a YAML file that defines how Docker containers should behave in production.")])])]),s._v(" "),t("li",[t("p",[s._v("Run the new load-balanced app")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker swarm init\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker stack deploy -c docker-compose.yml getstartedlab\n")])])]),t("p",[s._v("注意到其中的  "),t("code",[s._v("getstartedlab")]),s._v("  是我们给 app 起的一个名字")])]),s._v(" "),t("li",[t("p",[s._v("查看： "),t("code",[s._v("sudo docker service ls")])]),s._v(" "),t("p",[s._v("注意到  "),t("code",[s._v("NAME")]),s._v("  属性的值为  "),t("code",[s._v("getstartedlab_web")]),s._v(" .")])])]),s._v(" "),t("h3",{attrs:{id:"task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[s._v("#")]),s._v(" Task")]),s._v(" "),t("blockquote",[t("p",[s._v("A single container running in a service is called a task.")])]),s._v(" "),t("p",[s._v("Let us list the "),t("strong",[s._v("task")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" getstartedlab_web\n")])])]),t("p",[s._v("如果顺利的话，这时候可以看到 5 个 task:  "),t("code",[s._v("getstartedlab_web.1")]),s._v("  至  "),t("code",[s._v("getstartedlab_web.5")]),s._v(" , 原因是我们在   "),t("code",[s._v("docker-compose.yml")]),s._v("  文件中配置了 5 个  "),t("code",[s._v("replices")]),s._v(" .")]),s._v(" "),t("h2",{attrs:{id:"swarms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swarms"}},[s._v("#")]),s._v(" Swarms")]),s._v(" "),t("p",[t("strong",[s._v("KEYWORDS")]),s._v(": swarm manager, workers, swarm clusters")])])}),[],!1,null,null,null);a.default=r.exports}}]);